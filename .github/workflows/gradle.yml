name: Java CI/CD with Gradle and EC2

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant permission to gradlew
        run: chmod +x ./backend/gradlew

      - name: Setup Gradle with caching
        uses: gradle/actions/setup-gradle@v4

      - name: Copy application.yml from GitHub Secrets
        run: |
          mkdir -p ./backend/src/main/resources
          echo "${{ secrets.APPLICATION_YML }}" > ./backend/src/main/resources/application.yml

      - name: Run Tests
        run: ./gradlew test
        working-directory: ./backend

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant permission to gradlew
        run: chmod +x ./Backend/gradlew

      - name: Setup Gradle with caching
        uses: gradle/actions/setup-gradle@v4

      - name: Build Project
        run: ./gradlew build
        working-directory: ./backend

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-build
          path: ./backend/build/libs/*.jar

      - name: Deploy to EC2
        env:
          PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
          HOST: ${{ secrets.EC2_HOST }}
          USER: ${{ secrets.EC2_USER }}
        run: |
          echo "$PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem

          # plain.jar 제외한 jar 파일 선택
          JAR_FILE=$(find ./backend/build/libs -name "*.jar" ! -name "*-plain.jar" | head -n 1)

          # EC2에 jar 파일 전송
          scp -i private_key.pem -o StrictHostKeyChecking=no $JAR_FILE $USER@$HOST:/home/$USER/app.jar

          # EC2에서 기존 프로세스 종료 후 새로 실행
          ssh -i private_key.pem -o StrictHostKeyChecking=no $USER@$HOST << 'EOF'
            PID=$(pgrep -f 'app.jar')
            if [ -n "$PID" ]; then
              kill -9 $PID
              echo "Stopped existing application: $PID"
            fi
            nohup java -jar /home/$USER/app.jar > app.log 2>&1 &
            echo "New application deployed and started"
          EOF

