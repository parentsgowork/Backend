name: Java CI/CD with Gradle and EC2

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant permission to gradlew
        run: chmod +x ./gradlew

      - name: Setup Gradle with caching
        uses: gradle/actions/setup-gradle@v4

      - name: Copy application.yml from GitHub Secrets
        run: |
          mkdir -p ./src/main/resources
          echo "${{ secrets.APPLICATION_PROPERTIES }}" > ./src/main/resources/application.properties

      - name: Run Tests
        run: ./gradlew test

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant permission to gradlew
        run: chmod +x ./gradlew

      - name: Setup Gradle with caching
        uses: gradle/actions/setup-gradle@v4

      - name: Copy application.yml from GitHub Secrets
        run: |
          mkdir -p ./src/main/resources
          echo "${{ secrets.APPLICATION_PROPERTIES }}" > ./src/main/resources/application.properties

      - name: Build Project
        run: ./gradlew build

      - name: Build Docker image
        run: docker build -t myapp .

      - name: Save Docker image as tar file
        run: docker save myapp > myapp.tar

      - name: Send Docker image to EC2
        env:
          PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
          HOST: ${{ secrets.EC2_HOST }}
          USER: ${{ secrets.EC2_USER }}
        run: |
          echo "$PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          scp -i private_key.pem -o StrictHostKeyChecking=no myapp.tar $USER@$HOST:/home/$USER/

      - name: Deploy on EC2
        env:
          PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
          HOST: ${{ secrets.EC2_HOST }}
          USER: ${{ secrets.EC2_USER }}
        run: |
          echo "$PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          ssh -i private_key.pem -o StrictHostKeyChecking=no $USER@$HOST << 'EOF'
            docker load < myapp.tar
            docker stop myapp || true
            docker rm myapp || true
            docker run -d --name myapp -p 8080:8080 myapp
          EOF
